// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DBContractInitialized extends ethereum.Event {
  get params(): DBContractInitialized__Params {
    return new DBContractInitialized__Params(this);
  }
}

export class DBContractInitialized__Params {
  _event: DBContractInitialized;

  constructor(event: DBContractInitialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DBContract__calcLevelResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getLevel(): BigInt {
    return this.value0;
  }

  getOverflow(): BigInt {
    return this.value1;
  }
}

export class DBContract extends ethereum.SmartContract {
  static bind(address: Address): DBContract {
    return new DBContract("DBContract", address);
  }

  AP_TOKEN(): Address {
    let result = super.call("AP_TOKEN", "AP_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_AP_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("AP_TOKEN", "AP_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  LISTED_LYNKNFT(): Address {
    let result = super.call("LISTED_LYNKNFT", "LISTED_LYNKNFT():(address)", []);

    return result[0].toAddress();
  }

  try_LISTED_LYNKNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "LISTED_LYNKNFT",
      "LISTED_LYNKNFT():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  LYNKNFT(): Address {
    let result = super.call("LYNKNFT", "LYNKNFT():(address)", []);

    return result[0].toAddress();
  }

  try_LYNKNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall("LYNKNFT", "LYNKNFT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  LYNK_TOKEN(): Address {
    let result = super.call("LYNK_TOKEN", "LYNK_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_LYNK_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("LYNK_TOKEN", "LYNK_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MARKET(): Address {
    let result = super.call("MARKET", "MARKET():(address)", []);

    return result[0].toAddress();
  }

  try_MARKET(): ethereum.CallResult<Address> {
    let result = super.tryCall("MARKET", "MARKET():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  STAKING(): Address {
    let result = super.call("STAKING", "STAKING():(address)", []);

    return result[0].toAddress();
  }

  try_STAKING(): ethereum.CallResult<Address> {
    let result = super.tryCall("STAKING", "STAKING():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  STAKING_LYNKNFT(): Address {
    let result = super.call(
      "STAKING_LYNKNFT",
      "STAKING_LYNKNFT():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_STAKING_LYNKNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "STAKING_LYNKNFT",
      "STAKING_LYNKNFT():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TEAM_ADDR(): Address {
    let result = super.call("TEAM_ADDR", "TEAM_ADDR():(address)", []);

    return result[0].toAddress();
  }

  try_TEAM_ADDR(): ethereum.CallResult<Address> {
    let result = super.tryCall("TEAM_ADDR", "TEAM_ADDR():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  USDT_TOKEN(): Address {
    let result = super.call("USDT_TOKEN", "USDT_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_USDT_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDT_TOKEN", "USDT_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  USER_INFO(): Address {
    let result = super.call("USER_INFO", "USER_INFO():(address)", []);

    return result[0].toAddress();
  }

  try_USER_INFO(): ethereum.CallResult<Address> {
    let result = super.tryCall("USER_INFO", "USER_INFO():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  acceptTokenLength(): BigInt {
    let result = super.call(
      "acceptTokenLength",
      "acceptTokenLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_acceptTokenLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "acceptTokenLength",
      "acceptTokenLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  acceptTokens(param0: BigInt): Address {
    let result = super.call("acceptTokens", "acceptTokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_acceptTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "acceptTokens",
      "acceptTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  achievementRewardAmounts(param0: BigInt): BigInt {
    let result = super.call(
      "achievementRewardAmounts",
      "achievementRewardAmounts(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_achievementRewardAmounts(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "achievementRewardAmounts",
      "achievementRewardAmounts(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  achievementRewardAmountsNum(): BigInt {
    let result = super.call(
      "achievementRewardAmountsNum",
      "achievementRewardAmountsNum():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_achievementRewardAmountsNum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "achievementRewardAmountsNum",
      "achievementRewardAmountsNum():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  achievementRewardDurationThreshold(): BigInt {
    let result = super.call(
      "achievementRewardDurationThreshold",
      "achievementRewardDurationThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_achievementRewardDurationThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "achievementRewardDurationThreshold",
      "achievementRewardDurationThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  achievementRewardLevelThreshold(): BigInt {
    let result = super.call(
      "achievementRewardLevelThreshold",
      "achievementRewardLevelThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_achievementRewardLevelThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "achievementRewardLevelThreshold",
      "achievementRewardLevelThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  attributeLevelThreshold(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "attributeLevelThreshold",
      "attributeLevelThreshold(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_attributeLevelThreshold(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "attributeLevelThreshold",
      "attributeLevelThreshold(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  attributeLevelThresholdNum(): BigInt {
    let result = super.call(
      "attributeLevelThresholdNum",
      "attributeLevelThresholdNum():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_attributeLevelThresholdNum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "attributeLevelThresholdNum",
      "attributeLevelThresholdNum():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseTokenURI(): string {
    let result = super.call("baseTokenURI", "baseTokenURI():(string)", []);

    return result[0].toString();
  }

  try_baseTokenURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseTokenURI", "baseTokenURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  calcLevel(_attr: i32, _point: BigInt): DBContract__calcLevelResult {
    let result = super.call(
      "calcLevel",
      "calcLevel(uint8,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_attr)),
        ethereum.Value.fromUnsignedBigInt(_point)
      ]
    );

    return new DBContract__calcLevelResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcLevel(
    _attr: i32,
    _point: BigInt
  ): ethereum.CallResult<DBContract__calcLevelResult> {
    let result = super.tryCall(
      "calcLevel",
      "calcLevel(uint8,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_attr)),
        ethereum.Value.fromUnsignedBigInt(_point)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DBContract__calcLevelResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  calcTokenLevel(_tokenId: BigInt): BigInt {
    let result = super.call(
      "calcTokenLevel",
      "calcTokenLevel(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toBigInt();
  }

  try_calcTokenLevel(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcTokenLevel",
      "calcTokenLevel(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  communityRewardRate(_level: i32, _invitationLevel: BigInt): BigInt {
    let result = super.call(
      "communityRewardRate",
      "communityRewardRate(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_level)),
        ethereum.Value.fromUnsignedBigInt(_invitationLevel)
      ]
    );

    return result[0].toBigInt();
  }

  try_communityRewardRate(
    _level: i32,
    _invitationLevel: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "communityRewardRate",
      "communityRewardRate(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_level)),
        ethereum.Value.fromUnsignedBigInt(_invitationLevel)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  communityRewardRates(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "communityRewardRates",
      "communityRewardRates(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_communityRewardRates(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "communityRewardRates",
      "communityRewardRates(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  communityRewardRatesNumByLevel(_level: i32): BigInt {
    let result = super.call(
      "communityRewardRatesNumByLevel",
      "communityRewardRatesNumByLevel(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_level))]
    );

    return result[0].toBigInt();
  }

  try_communityRewardRatesNumByLevel(_level: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "communityRewardRatesNumByLevel",
      "communityRewardRatesNumByLevel(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_level))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contributionRewardAmounts(param0: BigInt): BigInt {
    let result = super.call(
      "contributionRewardAmounts",
      "contributionRewardAmounts(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_contributionRewardAmounts(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contributionRewardAmounts",
      "contributionRewardAmounts(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contributionRewardAmountsNum(): BigInt {
    let result = super.call(
      "contributionRewardAmountsNum",
      "contributionRewardAmountsNum():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_contributionRewardAmountsNum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contributionRewardAmountsNum",
      "contributionRewardAmountsNum():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contributionRewardThreshold(): BigInt {
    let result = super.call(
      "contributionRewardThreshold",
      "contributionRewardThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_contributionRewardThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contributionRewardThreshold",
      "contributionRewardThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  directRequirements(param0: BigInt): BigInt {
    let result = super.call(
      "directRequirements",
      "directRequirements(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_directRequirements(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "directRequirements",
      "directRequirements(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  directRequirementsNum(): BigInt {
    let result = super.call(
      "directRequirementsNum",
      "directRequirementsNum():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_directRequirementsNum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "directRequirementsNum",
      "directRequirementsNum():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasAchievementReward(_nftId: BigInt): boolean {
    let result = super.call(
      "hasAchievementReward",
      "hasAchievementReward(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_nftId)]
    );

    return result[0].toBoolean();
  }

  try_hasAchievementReward(_nftId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasAchievementReward",
      "hasAchievementReward(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_nftId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAcceptToken(_token: Address): boolean {
    let result = super.call("isAcceptToken", "isAcceptToken(address):(bool)", [
      ethereum.Value.fromAddress(_token)
    ]);

    return result[0].toBoolean();
  }

  try_isAcceptToken(_token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAcceptToken",
      "isAcceptToken(address):(bool)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxInvitationLevel(): BigInt {
    let result = super.call(
      "maxInvitationLevel",
      "maxInvitationLevel():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxInvitationLevel(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxInvitationLevel",
      "maxInvitationLevel():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxMintPerDayPerAddress(): BigInt {
    let result = super.call(
      "maxMintPerDayPerAddress",
      "maxMintPerDayPerAddress():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxMintPerDayPerAddress(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxMintPerDayPerAddress",
      "maxMintPerDayPerAddress():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintPrices(param0: BigInt): BigInt {
    let result = super.call("mintPrices", "mintPrices(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_mintPrices(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintPrices", "mintPrices(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintPricesNum(): BigInt {
    let result = super.call("mintPricesNum", "mintPricesNum():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mintPricesNum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintPricesNum",
      "mintPricesNum():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  operator(): Address {
    let result = super.call("operator", "operator():(address)", []);

    return result[0].toAddress();
  }

  try_operator(): ethereum.CallResult<Address> {
    let result = super.tryCall("operator", "operator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  packageByIndex(_index: BigInt): Array<BigInt> {
    let result = super.call(
      "packageByIndex",
      "packageByIndex(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toBigIntArray();
  }

  try_packageByIndex(_index: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "packageByIndex",
      "packageByIndex(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  packageLength(): BigInt {
    let result = super.call("packageLength", "packageLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_packageLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "packageLength",
      "packageLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  performanceRequirements(param0: BigInt): BigInt {
    let result = super.call(
      "performanceRequirements",
      "performanceRequirements(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_performanceRequirements(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "performanceRequirements",
      "performanceRequirements(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  performanceRequirementsNum(): BigInt {
    let result = super.call(
      "performanceRequirementsNum",
      "performanceRequirementsNum():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_performanceRequirementsNum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "performanceRequirementsNum",
      "performanceRequirementsNum():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rootAddress(): Address {
    let result = super.call("rootAddress", "rootAddress():(address)", []);

    return result[0].toAddress();
  }

  try_rootAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("rootAddress", "rootAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sellingLevelLimit(): BigInt {
    let result = super.call(
      "sellingLevelLimit",
      "sellingLevelLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_sellingLevelLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellingLevelLimit",
      "sellingLevelLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellingPackages(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "sellingPackages",
      "sellingPackages(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_sellingPackages(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellingPackages",
      "sellingPackages(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  socialRewardRates(param0: BigInt): BigInt {
    let result = super.call(
      "socialRewardRates",
      "socialRewardRates(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_socialRewardRates(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "socialRewardRates",
      "socialRewardRates(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  socialRewardRatesNum(): BigInt {
    let result = super.call(
      "socialRewardRatesNum",
      "socialRewardRatesNum():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_socialRewardRatesNum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "socialRewardRatesNum",
      "socialRewardRatesNum():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tradingFee(): BigInt {
    let result = super.call("tradingFee", "tradingFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tradingFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tradingFee", "tradingFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _usdtToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class __DBContract_initCall extends ethereum.Call {
  get inputs(): __DBContract_initCall__Inputs {
    return new __DBContract_initCall__Inputs(this);
  }

  get outputs(): __DBContract_initCall__Outputs {
    return new __DBContract_initCall__Outputs(this);
  }
}

export class __DBContract_initCall__Inputs {
  _call: __DBContract_initCall;

  constructor(call: __DBContract_initCall) {
    this._call = call;
  }

  get _addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class __DBContract_initCall__Outputs {
  _call: __DBContract_initCall;

  constructor(call: __DBContract_initCall) {
    this._call = call;
  }
}

export class RemoveAcceptTokenCall extends ethereum.Call {
  get inputs(): RemoveAcceptTokenCall__Inputs {
    return new RemoveAcceptTokenCall__Inputs(this);
  }

  get outputs(): RemoveAcceptTokenCall__Outputs {
    return new RemoveAcceptTokenCall__Outputs(this);
  }
}

export class RemoveAcceptTokenCall__Inputs {
  _call: RemoveAcceptTokenCall;

  constructor(call: RemoveAcceptTokenCall) {
    this._call = call;
  }

  get _index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveAcceptTokenCall__Outputs {
  _call: RemoveAcceptTokenCall;

  constructor(call: RemoveAcceptTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAcceptTokenCall extends ethereum.Call {
  get inputs(): SetAcceptTokenCall__Inputs {
    return new SetAcceptTokenCall__Inputs(this);
  }

  get outputs(): SetAcceptTokenCall__Outputs {
    return new SetAcceptTokenCall__Outputs(this);
  }
}

export class SetAcceptTokenCall__Inputs {
  _call: SetAcceptTokenCall;

  constructor(call: SetAcceptTokenCall) {
    this._call = call;
  }

  get _acceptToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAcceptTokenCall__Outputs {
  _call: SetAcceptTokenCall;

  constructor(call: SetAcceptTokenCall) {
    this._call = call;
  }
}

export class SetAchievementRewardAmountsCall extends ethereum.Call {
  get inputs(): SetAchievementRewardAmountsCall__Inputs {
    return new SetAchievementRewardAmountsCall__Inputs(this);
  }

  get outputs(): SetAchievementRewardAmountsCall__Outputs {
    return new SetAchievementRewardAmountsCall__Outputs(this);
  }
}

export class SetAchievementRewardAmountsCall__Inputs {
  _call: SetAchievementRewardAmountsCall;

  constructor(call: SetAchievementRewardAmountsCall) {
    this._call = call;
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetAchievementRewardAmountsCall__Outputs {
  _call: SetAchievementRewardAmountsCall;

  constructor(call: SetAchievementRewardAmountsCall) {
    this._call = call;
  }
}

export class SetAchievementRewardDurationThresholdCall extends ethereum.Call {
  get inputs(): SetAchievementRewardDurationThresholdCall__Inputs {
    return new SetAchievementRewardDurationThresholdCall__Inputs(this);
  }

  get outputs(): SetAchievementRewardDurationThresholdCall__Outputs {
    return new SetAchievementRewardDurationThresholdCall__Outputs(this);
  }
}

export class SetAchievementRewardDurationThresholdCall__Inputs {
  _call: SetAchievementRewardDurationThresholdCall;

  constructor(call: SetAchievementRewardDurationThresholdCall) {
    this._call = call;
  }

  get _achievementRewardDurationThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAchievementRewardDurationThresholdCall__Outputs {
  _call: SetAchievementRewardDurationThresholdCall;

  constructor(call: SetAchievementRewardDurationThresholdCall) {
    this._call = call;
  }
}

export class SetAchievementRewardLevelThresholdCall extends ethereum.Call {
  get inputs(): SetAchievementRewardLevelThresholdCall__Inputs {
    return new SetAchievementRewardLevelThresholdCall__Inputs(this);
  }

  get outputs(): SetAchievementRewardLevelThresholdCall__Outputs {
    return new SetAchievementRewardLevelThresholdCall__Outputs(this);
  }
}

export class SetAchievementRewardLevelThresholdCall__Inputs {
  _call: SetAchievementRewardLevelThresholdCall;

  constructor(call: SetAchievementRewardLevelThresholdCall) {
    this._call = call;
  }

  get _achievementRewardLevelThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAchievementRewardLevelThresholdCall__Outputs {
  _call: SetAchievementRewardLevelThresholdCall;

  constructor(call: SetAchievementRewardLevelThresholdCall) {
    this._call = call;
  }
}

export class SetAddressesCall extends ethereum.Call {
  get inputs(): SetAddressesCall__Inputs {
    return new SetAddressesCall__Inputs(this);
  }

  get outputs(): SetAddressesCall__Outputs {
    return new SetAddressesCall__Outputs(this);
  }
}

export class SetAddressesCall__Inputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }

  get _addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetAddressesCall__Outputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }
}

export class SetAttributeLevelThresholdCall extends ethereum.Call {
  get inputs(): SetAttributeLevelThresholdCall__Inputs {
    return new SetAttributeLevelThresholdCall__Inputs(this);
  }

  get outputs(): SetAttributeLevelThresholdCall__Outputs {
    return new SetAttributeLevelThresholdCall__Outputs(this);
  }
}

export class SetAttributeLevelThresholdCall__Inputs {
  _call: SetAttributeLevelThresholdCall;

  constructor(call: SetAttributeLevelThresholdCall) {
    this._call = call;
  }

  get _attr(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _thresholds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetAttributeLevelThresholdCall__Outputs {
  _call: SetAttributeLevelThresholdCall;

  constructor(call: SetAttributeLevelThresholdCall) {
    this._call = call;
  }
}

export class SetBaseTokenURICall extends ethereum.Call {
  get inputs(): SetBaseTokenURICall__Inputs {
    return new SetBaseTokenURICall__Inputs(this);
  }

  get outputs(): SetBaseTokenURICall__Outputs {
    return new SetBaseTokenURICall__Outputs(this);
  }
}

export class SetBaseTokenURICall__Inputs {
  _call: SetBaseTokenURICall;

  constructor(call: SetBaseTokenURICall) {
    this._call = call;
  }

  get _baseTokenURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseTokenURICall__Outputs {
  _call: SetBaseTokenURICall;

  constructor(call: SetBaseTokenURICall) {
    this._call = call;
  }
}

export class SetCommunityRewardRatesCall extends ethereum.Call {
  get inputs(): SetCommunityRewardRatesCall__Inputs {
    return new SetCommunityRewardRatesCall__Inputs(this);
  }

  get outputs(): SetCommunityRewardRatesCall__Outputs {
    return new SetCommunityRewardRatesCall__Outputs(this);
  }
}

export class SetCommunityRewardRatesCall__Inputs {
  _call: SetCommunityRewardRatesCall;

  constructor(call: SetCommunityRewardRatesCall) {
    this._call = call;
  }

  get _level(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _rates(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetCommunityRewardRatesCall__Outputs {
  _call: SetCommunityRewardRatesCall;

  constructor(call: SetCommunityRewardRatesCall) {
    this._call = call;
  }
}

export class SetContributionRewardAmountsCall extends ethereum.Call {
  get inputs(): SetContributionRewardAmountsCall__Inputs {
    return new SetContributionRewardAmountsCall__Inputs(this);
  }

  get outputs(): SetContributionRewardAmountsCall__Outputs {
    return new SetContributionRewardAmountsCall__Outputs(this);
  }
}

export class SetContributionRewardAmountsCall__Inputs {
  _call: SetContributionRewardAmountsCall;

  constructor(call: SetContributionRewardAmountsCall) {
    this._call = call;
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetContributionRewardAmountsCall__Outputs {
  _call: SetContributionRewardAmountsCall;

  constructor(call: SetContributionRewardAmountsCall) {
    this._call = call;
  }
}

export class SetContributionRewardThresholdCall extends ethereum.Call {
  get inputs(): SetContributionRewardThresholdCall__Inputs {
    return new SetContributionRewardThresholdCall__Inputs(this);
  }

  get outputs(): SetContributionRewardThresholdCall__Outputs {
    return new SetContributionRewardThresholdCall__Outputs(this);
  }
}

export class SetContributionRewardThresholdCall__Inputs {
  _call: SetContributionRewardThresholdCall;

  constructor(call: SetContributionRewardThresholdCall) {
    this._call = call;
  }

  get _contributionRewardThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetContributionRewardThresholdCall__Outputs {
  _call: SetContributionRewardThresholdCall;

  constructor(call: SetContributionRewardThresholdCall) {
    this._call = call;
  }
}

export class SetDirectRequirementsCall extends ethereum.Call {
  get inputs(): SetDirectRequirementsCall__Inputs {
    return new SetDirectRequirementsCall__Inputs(this);
  }

  get outputs(): SetDirectRequirementsCall__Outputs {
    return new SetDirectRequirementsCall__Outputs(this);
  }
}

export class SetDirectRequirementsCall__Inputs {
  _call: SetDirectRequirementsCall;

  constructor(call: SetDirectRequirementsCall) {
    this._call = call;
  }

  get _requirements(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetDirectRequirementsCall__Outputs {
  _call: SetDirectRequirementsCall;

  constructor(call: SetDirectRequirementsCall) {
    this._call = call;
  }
}

export class SetMaxMintPerDayPerAddressCall extends ethereum.Call {
  get inputs(): SetMaxMintPerDayPerAddressCall__Inputs {
    return new SetMaxMintPerDayPerAddressCall__Inputs(this);
  }

  get outputs(): SetMaxMintPerDayPerAddressCall__Outputs {
    return new SetMaxMintPerDayPerAddressCall__Outputs(this);
  }
}

export class SetMaxMintPerDayPerAddressCall__Inputs {
  _call: SetMaxMintPerDayPerAddressCall;

  constructor(call: SetMaxMintPerDayPerAddressCall) {
    this._call = call;
  }

  get _maxMintPerDayPerAddress(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxMintPerDayPerAddressCall__Outputs {
  _call: SetMaxMintPerDayPerAddressCall;

  constructor(call: SetMaxMintPerDayPerAddressCall) {
    this._call = call;
  }
}

export class SetMintPricesCall extends ethereum.Call {
  get inputs(): SetMintPricesCall__Inputs {
    return new SetMintPricesCall__Inputs(this);
  }

  get outputs(): SetMintPricesCall__Outputs {
    return new SetMintPricesCall__Outputs(this);
  }
}

export class SetMintPricesCall__Inputs {
  _call: SetMintPricesCall;

  constructor(call: SetMintPricesCall) {
    this._call = call;
  }

  get _mintPrices(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetMintPricesCall__Outputs {
  _call: SetMintPricesCall;

  constructor(call: SetMintPricesCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetPerformanceRequirementsCall extends ethereum.Call {
  get inputs(): SetPerformanceRequirementsCall__Inputs {
    return new SetPerformanceRequirementsCall__Inputs(this);
  }

  get outputs(): SetPerformanceRequirementsCall__Outputs {
    return new SetPerformanceRequirementsCall__Outputs(this);
  }
}

export class SetPerformanceRequirementsCall__Inputs {
  _call: SetPerformanceRequirementsCall;

  constructor(call: SetPerformanceRequirementsCall) {
    this._call = call;
  }

  get _requirements(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetPerformanceRequirementsCall__Outputs {
  _call: SetPerformanceRequirementsCall;

  constructor(call: SetPerformanceRequirementsCall) {
    this._call = call;
  }
}

export class SetRootAddressCall extends ethereum.Call {
  get inputs(): SetRootAddressCall__Inputs {
    return new SetRootAddressCall__Inputs(this);
  }

  get outputs(): SetRootAddressCall__Outputs {
    return new SetRootAddressCall__Outputs(this);
  }
}

export class SetRootAddressCall__Inputs {
  _call: SetRootAddressCall;

  constructor(call: SetRootAddressCall) {
    this._call = call;
  }

  get _rootAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRootAddressCall__Outputs {
  _call: SetRootAddressCall;

  constructor(call: SetRootAddressCall) {
    this._call = call;
  }
}

export class SetSellingLevelLimitCall extends ethereum.Call {
  get inputs(): SetSellingLevelLimitCall__Inputs {
    return new SetSellingLevelLimitCall__Inputs(this);
  }

  get outputs(): SetSellingLevelLimitCall__Outputs {
    return new SetSellingLevelLimitCall__Outputs(this);
  }
}

export class SetSellingLevelLimitCall__Inputs {
  _call: SetSellingLevelLimitCall;

  constructor(call: SetSellingLevelLimitCall) {
    this._call = call;
  }

  get _sellingLevelLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSellingLevelLimitCall__Outputs {
  _call: SetSellingLevelLimitCall;

  constructor(call: SetSellingLevelLimitCall) {
    this._call = call;
  }
}

export class SetSocialRewardRatesCall extends ethereum.Call {
  get inputs(): SetSocialRewardRatesCall__Inputs {
    return new SetSocialRewardRatesCall__Inputs(this);
  }

  get outputs(): SetSocialRewardRatesCall__Outputs {
    return new SetSocialRewardRatesCall__Outputs(this);
  }
}

export class SetSocialRewardRatesCall__Inputs {
  _call: SetSocialRewardRatesCall;

  constructor(call: SetSocialRewardRatesCall) {
    this._call = call;
  }

  get _rates(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetSocialRewardRatesCall__Outputs {
  _call: SetSocialRewardRatesCall;

  constructor(call: SetSocialRewardRatesCall) {
    this._call = call;
  }
}

export class SetTradingFeeCall extends ethereum.Call {
  get inputs(): SetTradingFeeCall__Inputs {
    return new SetTradingFeeCall__Inputs(this);
  }

  get outputs(): SetTradingFeeCall__Outputs {
    return new SetTradingFeeCall__Outputs(this);
  }
}

export class SetTradingFeeCall__Inputs {
  _call: SetTradingFeeCall;

  constructor(call: SetTradingFeeCall) {
    this._call = call;
  }

  get _tradingFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTradingFeeCall__Outputs {
  _call: SetTradingFeeCall;

  constructor(call: SetTradingFeeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
