// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LYNKNFTEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LYNKNFTEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LYNKNFTEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LYNKNFTEntity", id.toString(), this);
    }
  }

  static load(id: string): LYNKNFTEntity | null {
    return changetype<LYNKNFTEntity | null>(store.get("LYNKNFTEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get isList(): boolean {
    let value = this.get("isList");
    return value!.toBoolean();
  }

  set isList(value: boolean) {
    this.set("isList", Value.fromBoolean(value));
  }

  get isStaking(): boolean {
    let value = this.get("isStaking");
    return value!.toBoolean();
  }

  set isStaking(value: boolean) {
    this.set("isStaking", Value.fromBoolean(value));
  }

  get charisma(): i32 {
    let value = this.get("charisma");
    return value!.toI32();
  }

  set charisma(value: i32) {
    this.set("charisma", Value.fromI32(value));
  }

  get vitality(): i32 {
    let value = this.get("vitality");
    return value!.toI32();
  }

  set vitality(value: i32) {
    this.set("vitality", Value.fromI32(value));
  }

  get intellect(): i32 {
    let value = this.get("intellect");
    return value!.toI32();
  }

  set intellect(value: i32) {
    this.set("intellect", Value.fromI32(value));
  }

  get dexterity(): i32 {
    let value = this.get("dexterity");
    return value!.toI32();
  }

  set dexterity(value: i32) {
    this.set("dexterity", Value.fromI32(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }
}

export class MintLogEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MintLogEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MintLogEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MintLogEntity", id.toString(), this);
    }
  }

  static load(id: string): MintLogEntity | null {
    return changetype<MintLogEntity | null>(store.get("MintLogEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventTime(): i32 {
    let value = this.get("eventTime");
    return value!.toI32();
  }

  set eventTime(value: i32) {
    this.set("eventTime", Value.fromI32(value));
  }

  get num(): i32 {
    let value = this.get("num");
    return value!.toI32();
  }

  set num(value: i32) {
    this.set("num", Value.fromI32(value));
  }

  get tx(): Bytes {
    let value = this.get("tx");
    return value!.toBytes();
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }
}

export class UserEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserEntity", id.toString(), this);
    }
  }

  static load(id: string): UserEntity | null {
    return changetype<UserEntity | null>(store.get("UserEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get level(): i32 {
    let value = this.get("level");
    return value!.toI32();
  }

  set level(value: i32) {
    this.set("level", Value.fromI32(value));
  }
}
