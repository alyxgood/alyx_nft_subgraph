// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class LevelUp extends ethereum.Event {
  get params(): LevelUp__Params {
    return new LevelUp__Params(this);
  }
}

export class LevelUp__Params {
  _event: LevelUp;

  constructor(event: LevelUp) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get level(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Register extends ethereum.Event {
  get params(): Register__Params {
    return new Register__Params(this);
  }
}

export class Register__Params {
  _event: Register;

  constructor(event: Register) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ref(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class User__calcAchievementRewardResult {
  value0: Array<boolean>;
  value1: BigInt;

  constructor(value0: Array<boolean>, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBooleanArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): Array<boolean> {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class User__stakeNFTsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getLastUpdateTime(): BigInt {
    return this.value0;
  }

  getStakedDuration(): BigInt {
    return this.value1;
  }
}

export class User__userInfoOfResult {
  value0: i32;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: i32,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getLevel(): i32 {
    return this.value0;
  }

  getRefAddress(): Address {
    return this.value1;
  }

  getStakeRev(): BigInt {
    return this.value2;
  }

  getSocialRev(): BigInt {
    return this.value3;
  }

  getCommunityRev(): BigInt {
    return this.value4;
  }

  getContributionRev(): BigInt {
    return this.value5;
  }

  getAchievementRev(): BigInt {
    return this.value6;
  }

  getPerformance(): BigInt {
    return this.value7;
  }
}

export class User extends ethereum.SmartContract {
  static bind(address: Address): User {
    return new User("User", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  BLACK_HOLE(): Address {
    let result = super.call("BLACK_HOLE", "BLACK_HOLE():(address)", []);

    return result[0].toAddress();
  }

  try_BLACK_HOLE(): ethereum.CallResult<Address> {
    let result = super.tryCall("BLACK_HOLE", "BLACK_HOLE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DB_CONTRACT(): Address {
    let result = super.call("DB_CONTRACT", "DB_CONTRACT():(address)", []);

    return result[0].toAddress();
  }

  try_DB_CONTRACT(): ethereum.CallResult<Address> {
    let result = super.tryCall("DB_CONTRACT", "DB_CONTRACT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calcAchievementReward(
    _userAddr: Address,
    _nftIds: Array<BigInt>
  ): User__calcAchievementRewardResult {
    let result = super.call(
      "calcAchievementReward",
      "calcAchievementReward(address,uint256[]):(bool[],uint256)",
      [
        ethereum.Value.fromAddress(_userAddr),
        ethereum.Value.fromUnsignedBigIntArray(_nftIds)
      ]
    );

    return new User__calcAchievementRewardResult(
      result[0].toBooleanArray(),
      result[1].toBigInt()
    );
  }

  try_calcAchievementReward(
    _userAddr: Address,
    _nftIds: Array<BigInt>
  ): ethereum.CallResult<User__calcAchievementRewardResult> {
    let result = super.tryCall(
      "calcAchievementReward",
      "calcAchievementReward(address,uint256[]):(bool[],uint256)",
      [
        ethereum.Value.fromAddress(_userAddr),
        ethereum.Value.fromUnsignedBigIntArray(_nftIds)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new User__calcAchievementRewardResult(
        value[0].toBooleanArray(),
        value[1].toBigInt()
      )
    );
  }

  isValidUser(_userAddr: Address): boolean {
    let result = super.call("isValidUser", "isValidUser(address):(bool)", [
      ethereum.Value.fromAddress(_userAddr)
    ]);

    return result[0].toBoolean();
  }

  try_isValidUser(_userAddr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isValidUser", "isValidUser(address):(bool)", [
      ethereum.Value.fromAddress(_userAddr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  levelUpAble(_userAddr: Address): boolean {
    let result = super.call("levelUpAble", "levelUpAble(address):(bool)", [
      ethereum.Value.fromAddress(_userAddr)
    ]);

    return result[0].toBoolean();
  }

  try_levelUpAble(_userAddr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("levelUpAble", "levelUpAble(address):(bool)", [
      ethereum.Value.fromAddress(_userAddr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  refCounterOf(_userAddr: Address, _level: i32): BigInt {
    let result = super.call(
      "refCounterOf",
      "refCounterOf(address,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(_userAddr),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_level))
      ]
    );

    return result[0].toBigInt();
  }

  try_refCounterOf(
    _userAddr: Address,
    _level: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "refCounterOf",
      "refCounterOf(address,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(_userAddr),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_level))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeNFTs(param0: BigInt): User__stakeNFTsResult {
    let result = super.call(
      "stakeNFTs",
      "stakeNFTs(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new User__stakeNFTsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_stakeNFTs(param0: BigInt): ethereum.CallResult<User__stakeNFTsResult> {
    let result = super.tryCall(
      "stakeNFTs",
      "stakeNFTs(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new User__stakeNFTsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  userInfoOf(param0: Address): User__userInfoOfResult {
    let result = super.call(
      "userInfoOf",
      "userInfoOf(address):(uint8,address,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new User__userInfoOfResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_userInfoOf(param0: Address): ethereum.CallResult<User__userInfoOfResult> {
    let result = super.tryCall(
      "userInfoOf",
      "userInfoOf(address):(uint8,address,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new User__userInfoOfResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AdminCall extends ethereum.Call {
  get inputs(): AdminCall__Inputs {
    return new AdminCall__Inputs(this);
  }

  get outputs(): AdminCall__Outputs {
    return new AdminCall__Outputs(this);
  }
}

export class AdminCall__Inputs {
  _call: AdminCall;

  constructor(call: AdminCall) {
    this._call = call;
  }
}

export class AdminCall__Outputs {
  _call: AdminCall;

  constructor(call: AdminCall) {
    this._call = call;
  }

  get admin_(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class ChangeAdminCall extends ethereum.Call {
  get inputs(): ChangeAdminCall__Inputs {
    return new ChangeAdminCall__Inputs(this);
  }

  get outputs(): ChangeAdminCall__Outputs {
    return new ChangeAdminCall__Outputs(this);
  }
}

export class ChangeAdminCall__Inputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeAdminCall__Outputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }
}

export class ImplementationCall extends ethereum.Call {
  get inputs(): ImplementationCall__Inputs {
    return new ImplementationCall__Inputs(this);
  }

  get outputs(): ImplementationCall__Outputs {
    return new ImplementationCall__Outputs(this);
  }
}

export class ImplementationCall__Inputs {
  _call: ImplementationCall;

  constructor(call: ImplementationCall) {
    this._call = call;
  }
}

export class ImplementationCall__Outputs {
  _call: ImplementationCall;

  constructor(call: ImplementationCall) {
    this._call = call;
  }

  get implementation_(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class __User_initCall extends ethereum.Call {
  get inputs(): __User_initCall__Inputs {
    return new __User_initCall__Inputs(this);
  }

  get outputs(): __User_initCall__Outputs {
    return new __User_initCall__Outputs(this);
  }
}

export class __User_initCall__Inputs {
  _call: __User_initCall;

  constructor(call: __User_initCall) {
    this._call = call;
  }
}

export class __User_initCall__Outputs {
  _call: __User_initCall;

  constructor(call: __User_initCall) {
    this._call = call;
  }
}

export class AuditLevelCall extends ethereum.Call {
  get inputs(): AuditLevelCall__Inputs {
    return new AuditLevelCall__Inputs(this);
  }

  get outputs(): AuditLevelCall__Outputs {
    return new AuditLevelCall__Outputs(this);
  }
}

export class AuditLevelCall__Inputs {
  _call: AuditLevelCall;

  constructor(call: AuditLevelCall) {
    this._call = call;
  }

  get _userAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AuditLevelCall__Outputs {
  _call: AuditLevelCall;

  constructor(call: AuditLevelCall) {
    this._call = call;
  }
}

export class ClaimAchievementRewardCall extends ethereum.Call {
  get inputs(): ClaimAchievementRewardCall__Inputs {
    return new ClaimAchievementRewardCall__Inputs(this);
  }

  get outputs(): ClaimAchievementRewardCall__Outputs {
    return new ClaimAchievementRewardCall__Outputs(this);
  }
}

export class ClaimAchievementRewardCall__Inputs {
  _call: ClaimAchievementRewardCall;

  constructor(call: ClaimAchievementRewardCall) {
    this._call = call;
  }

  get _nftIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class ClaimAchievementRewardCall__Outputs {
  _call: ClaimAchievementRewardCall;

  constructor(call: ClaimAchievementRewardCall) {
    this._call = call;
  }
}

export class HookByClaimRewardCall extends ethereum.Call {
  get inputs(): HookByClaimRewardCall__Inputs {
    return new HookByClaimRewardCall__Inputs(this);
  }

  get outputs(): HookByClaimRewardCall__Outputs {
    return new HookByClaimRewardCall__Outputs(this);
  }
}

export class HookByClaimRewardCall__Inputs {
  _call: HookByClaimRewardCall;

  constructor(call: HookByClaimRewardCall) {
    this._call = call;
  }

  get _userAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class HookByClaimRewardCall__Outputs {
  _call: HookByClaimRewardCall;

  constructor(call: HookByClaimRewardCall) {
    this._call = call;
  }
}

export class HookByStakeCall extends ethereum.Call {
  get inputs(): HookByStakeCall__Inputs {
    return new HookByStakeCall__Inputs(this);
  }

  get outputs(): HookByStakeCall__Outputs {
    return new HookByStakeCall__Outputs(this);
  }
}

export class HookByStakeCall__Inputs {
  _call: HookByStakeCall;

  constructor(call: HookByStakeCall) {
    this._call = call;
  }

  get nftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class HookByStakeCall__Outputs {
  _call: HookByStakeCall;

  constructor(call: HookByStakeCall) {
    this._call = call;
  }
}

export class HookByUnStakeCall extends ethereum.Call {
  get inputs(): HookByUnStakeCall__Inputs {
    return new HookByUnStakeCall__Inputs(this);
  }

  get outputs(): HookByUnStakeCall__Outputs {
    return new HookByUnStakeCall__Outputs(this);
  }
}

export class HookByUnStakeCall__Inputs {
  _call: HookByUnStakeCall;

  constructor(call: HookByUnStakeCall) {
    this._call = call;
  }

  get nftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class HookByUnStakeCall__Outputs {
  _call: HookByUnStakeCall;

  constructor(call: HookByUnStakeCall) {
    this._call = call;
  }
}

export class HookByUpgradeCall extends ethereum.Call {
  get inputs(): HookByUpgradeCall__Inputs {
    return new HookByUpgradeCall__Inputs(this);
  }

  get outputs(): HookByUpgradeCall__Outputs {
    return new HookByUpgradeCall__Outputs(this);
  }
}

export class HookByUpgradeCall__Inputs {
  _call: HookByUpgradeCall;

  constructor(call: HookByUpgradeCall) {
    this._call = call;
  }

  get _userAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _performance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class HookByUpgradeCall__Outputs {
  _call: HookByUpgradeCall;

  constructor(call: HookByUpgradeCall) {
    this._call = call;
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get _refAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _logic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
